name: Release instance

on:
  workflow_call:
    inputs:
      APP_NAME:
        required: true
        type: string
      RUNNER_LABEL:
        required: true
        type: string
      PUBLIC_INFRA_DEPLOYMENT:
        required: true
        type: boolean
      ENVIRONMENT:
        required: false
        default: prod
        type: string
      INFRASTRUCTURE_FOLDER:
        required: false
        default: "infrastructure"
        type: string
      INFRA_CONFIG_REPO:
        required: false
        type: string
      CORE_INFRA_REF:
        type: string
        required: false
        default: refs/heads/main
      INFRA_CONFIG_REF:
        type: string
        required: false
        default: refs/heads/main
      IMAGE_TAG:
        type: string
        required: false


    secrets:
      AWS_GITHUBRUNNER_PAT:
        required: true
      AWS_GITHUBRUNNER_PAT_USER:
        required: true
      AWS_REGION:
        required: true
      AWS_ACCOUNT_ID:
        required: true

jobs:
  release-terraform:
    runs-on: ${{ inputs.RUNNER_LABEL }}
    
    strategy:
      matrix:
        service: [frontend, backend]

    steps:

    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: main

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3-node20
      id: aws-credentials
      with:
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: 'yes'

    - name: Dump inputs context
      env:
        INPUTS: ${{ toJSON(inputs) }}
      run: echo "$INPUTS"

    - name: Checkout i-ai-core-infrastructure
      uses: actions/checkout@v4
      with:
        repository: i-dot-ai/i-ai-core-infrastructure
        ref: ${{ inputs.CORE_INFRA_REF }}
        token: ${{ secrets.AWS_GITHUBRUNNER_PAT }}
        path: i-ai-core-infrastructure

    - name: Optionally checkout terraform config variables for public repos
      if: ${{ inputs.PUBLIC_INFRA_DEPLOYMENT == true }}
      uses: actions/checkout@v4
      with:
        repository: i-dot-ai/${{ inputs.INFRA_CONFIG_REPO }}
        ref: ${{ inputs.INFRA_CONFIG_REF }}
        token: ${{ secrets.AWS_GITHUBRUNNER_PAT }}
        path: ${{ inputs.INFRA_CONFIG_REPO }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      shell: bash

    - name: Terraform init
      env:
        INFRASTRUCTURE_FOLDER: ${{ inputs.INFRASTRUCTURE_FOLDER }}
      run: |
        cd main
        if [[ $INFRASTRUCTURE_FOLDER ]]; then
          make tf_init infrastructure_folder=${{inputs.INFRASTRUCTURE_FOLDER}}
        else
          make tf_init
        fi

    - name: Terraform apply
      env: 
        INFRASTRUCTURE_FOLDER: ${{ inputs.INFRASTRUCTURE_FOLDER }}
        ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        IMAGE_TAG: ${{ inputs.IMAGE_TAG }}
        TF_LOGS: "INFO"
        TF_CLI_ARGS: "-no-color"
      run: |
        cd main
        tfParams=()
        [[ $INFRASTRUCTURE_FOLDER ]] && tfParams+=( "INFRASTRUCTURE_FOLDER=$INFRASTRUCTURE_FOLDER" )
        tfParams+=( "env=$ENVIRONMENT" )
        make tf_set_or_create_workspace "${tfParams[@]}"
        if [[ $IMAGE_TAG ]]; then
          make tf_auto_apply IMAGE_TAG=${{ inputs.IMAGE_TAG }} "${tfParams[@]}" > tf_apply_log.log # TODO: mask any sensitive values
        else
          make tf_auto_apply "${tfParams[@]}" > tf_apply_log.log # TODO: mask any sensitive values
        fi

    - name: Copy terraform logs to s3
      if: always()
      env:
        ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        APP_NAME: ${{ inputs.APP_NAME }}
      run: |
        cd main
        FILENAME=$APP_NAME/$(date +\%H-\%M-%d-%m-%Y)-$(git rev-parse HEAD).log
        aws s3 cp tf_apply_log.log "s3://i-dot-ai-$ENVIRONMENT-github-runner-logs/${FILENAME}"

    - name: Tag built image with deployment environment
      env:
        ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
        APP_NAME: ${{ inputs.APP_NAME }}
        INFRASTRUCTURE_FOLDER: ${{ inputs.INFRASTRUCTURE_FOLDER }}
        IMAGE_TAG: ${{ inputs.IMAGE_TAG }}
        SERVICE: ${{ matrix.service }}
      run: |
        if [[ $INFRASTRUCTURE_FOLDER ]]; then
          cd main
          if [[ $IMAGE_TAG ]]; then
            make docker_update_tag tag=$ENVIRONMENT IMAGE_TAG=$IMAGE_TAG service=${{ matrix.service }}
          else
            make docker_update_tag tag=$ENVIRONMENT
          fi
        fi
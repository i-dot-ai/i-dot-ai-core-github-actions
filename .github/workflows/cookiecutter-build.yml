name: Build dash

on:
  workflow_call:
    inputs:
      APP_NAME:
        required: true
        type: string
      RUNNER_LABEL:
        required: true
        type: string
      INFRASTRUCTURE_FOLDER:
        required: true
        type: string
      DOCKER_BUILD_INSTANCE:
        required: false
        default: container
        type: string
      COMMIT_HASH:
        required: false
        type: string
        default: ${{ github.sha }}
      SERVICE:
        required: false
        type: string
      ENVIRONMENT:
        required: false
        type: string
        default: prod
      USE_OIDC:
        description: 'Use OIDC for AWS authentication'
        required: false
        type: boolean
        default: false
    secrets:
      AWS_GITHUBRUNNER_PAT:
        required: true
      AWS_GITHUBRUNNER_PAT_USER:
        required: true
      AWS_REGION:
        required: true
      AWS_ACCOUNT_ID:
        required: true

jobs:
  integration-test:
    name: build-deploy-destroy
    runs-on: ${{ inputs.RUNNER_LABEL }}

    steps:

    - name: Checkout 10ds actions repo
      uses: actions/checkout@v4
      with:
        repository: PMO-Data-Science/10ds-core-github-actions
        ref: refs/heads/main
        token: ${{ secrets.AWS_GITHUBRUNNER_PAT }}

    - name: AWS Authentication
      uses: ./.github/actions/authenticate_aws
      with:
          USE_OIDC: ${{ inputs.USE_OIDC }}
          ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_GITHUBRUNNER_USER_ACCESS_KEY: ${{ secrets.AWS_GITHUBRUNNER_USER_ACCESS_KEY }}
          AWS_GITHUBRUNNER_USER_SECRET_ID: ${{ secrets.AWS_GITHUBRUNNER_USER_SECRET_ID }}

    - name: Dump inputs context
      env:
        INPUTS: ${{ toJSON(inputs) }}
      run: echo "$INPUTS"

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'  

    - name: Set global git credentials
      run: git config --global url.https://${{ secrets.AWS_GITHUBRUNNER_PAT }}@github.com/.insteadOf https://github.com/


    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      shell: bash


    - name: Checkout 10ds actions repo
      uses: actions/checkout@v4
      with:
        repository: PMO-Data-Science/10ds-core-github-actions
        ref: refs/heads/main
        token: ${{ secrets.AWS_GITHUBRUNNER_PAT }}


    - name: Export EFS_MOUNT_PATH
      uses: ./.github/actions/export_parameter  
      with:
          PARAMETER_STORE_VAR_NAME: /github-runner-${{ inputs.ENVIRONMENT }}/efs-mount-path
          ENVIRONMENT_VAR_NAME: EFS_MOUNT_PATH

    - name: ⬇️ Download artifact
      uses: actions/download-artifact@v4
    
    - name: 📂 List all directories
      run: |
          echo "Listing all directories in the current path:"
          cd artifact
          ls -ltr

    - name: Create Docker Cache Container
      env:
        INSTANCE_NAME: ${{ inputs.DOCKER_BUILD_INSTANCE }}
      run: |
        if docker buildx ls --format "{{.Name}}" | grep -w "${INSTANCE_NAME}"; then
          echo "Instance ${INSTANCE_NAME} found."
        else
          echo "Instance ${INSTANCE_NAME} not found."
          docker buildx create --name "${INSTANCE_NAME}" --driver docker-container
          echo "Instance ${INSTANCE_NAME} is created."
        fi

    - name: Install Packages
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        APP_NAME: ${{ inputs.APP_NAME }}
        SERVICE: ${{ inputs.SERVICE }}
        CACHE: ${{ env.EFS_MOUNT_PATH }}
      run: |
        pip install poetry

    - name: Install Application
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        APP_NAME: ${{ inputs.APP_NAME }}
        SERVICE: ${{ inputs.SERVICE }}
        CACHE: ${{ env.EFS_MOUNT_PATH }}
      run: |
        cd artifact/$APP_NAME
        make install

    - name: Docker build
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        APP_NAME: ${{ inputs.APP_NAME }}
        SERVICE: ${{ inputs.SERVICE }}
        CACHE: ${{ env.EFS_MOUNT_PATH }}
      run: |
        cd artifact/$APP_NAME
        make docker_build service=$SERVICE cache=$CACHE

    - name: Docker Push
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        APP_NAME: ${{ inputs.APP_NAME }}
        SERVICE: ${{ inputs.SERVICE }}
      run: |
        cd artifact/$APP_NAME
        make docker_push service=$SERVICE
        IMAGE=$(eval $(make docker_echo value=IMAGE service=$SERVICE) | awk '{print $1;}')
    
    # - name: Terraform init
    #   env:
    #     INFRASTRUCTURE_FOLDER: ${{ inputs.INFRASTRUCTURE_FOLDER }}
    #     APP_NAME: ${{ inputs.APP_NAME }}
    #     ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
    #   run: |
    #     cd artifact/$APP_NAME
    #     make tf_init env=dev
  
    # - name: Terraform apply
    #   env: 
    #     INFRASTRUCTURE_FOLDER: ${{ inputs.INFRASTRUCTURE_FOLDER }}
    #     ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
    #     APP_NAME: ${{ inputs.APP_NAME }}
    #     TF_LOGS: "INFO"
    #     TF_CLI_ARGS: "-no-color"
    #   run: |
    #     cd artifact/$APP_NAME
    #     tfParams=()
    #     make tf_set_or_create_workspace env=dev
    #     make tf_apply env=dev args='-auto-approve'

    # - name: 🕒 Waiting for 3 mins
    #   run: sleep 180  # Delay for 3 mins

    # - name: Terraform destroy
    #   env: 
    #     INFRASTRUCTURE_FOLDER: ${{ inputs.INFRASTRUCTURE_FOLDER }}
    #     ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
    #     APP_NAME: ${{ inputs.APP_NAME }}
    #   run: |
    #     cd artifact/$APP_NAME
    #     make tf_destroy env=dev  args='-auto-approve'


    - name: Export ecr image attributes
      id: export-ecr
      env:
        APP_NAME: ${{ inputs.APP_NAME }}
        SERVICE: ${{ inputs.SERVICE }}
      run: |
        cd artifact/$APP_NAME
        export REPO=$(eval $(make docker_echo value=ECR_REPO_NAME service=$SERVICE) | awk '{print $1;}')
        echo "repo=$REPO" >> $GITHUB_OUTPUT
        export TAG=$(eval $(make docker_echo value=IMAGE_TAG service=$SERVICE)| awk '{print $1;}')
        echo "tag=$TAG" >> $GITHUB_OUTPUT

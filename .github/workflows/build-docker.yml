name: Build dash

on:
  workflow_call:
    inputs:
      APP_NAME:
        required: true
        type: string
      RUNNER_LABEL:
        required: true
        type: string
      INFRASTRUCTURE_FOLDER: # Deprecated - to be removed
        required: false
        type: string
      DOCKER_BUILD_INSTANCE:
        required: false
        default: container
        type: string
      COMMIT_HASH:
        required: false
        type: string
        default: ${{ github.sha }}
      SERVICE:
        required: false
        type: string
      ENVIRONMENT:
        required: false
        type: string
        default: prod
      USE_OIDC:
        description: 'Use OIDC for AWS authentication'
        required: false
        type: boolean
        default: false
      PUBLIC_ECR:
        type: boolean
        default: false
      AWS_REGION:
        type: string
        default: "us-east-1"
      VERSION:
        required: false
        type: string
        default: "us-east-1"
    secrets:
      AWS_GITHUBRUNNER_PAT:
        required: true
      AWS_GITHUBRUNNER_PAT_USER:
        required: true

      AWS_ACCOUNT_ID:
        required: true

jobs:
  build-and-push-to-ecr:
    name: Build and push to ECR
    runs-on: ${{ inputs.RUNNER_LABEL }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.COMMIT_HASH }}
        fetch-depth: 0
        path: main

    - name: Dump inputs context
      env:
        INPUTS: ${{ toJSON(inputs) }}
      run: echo "$INPUTS"

    - name: AWS Authentication
      uses: i-dot-ai/i-dot-ai-core-github-actions/.github/actions/authenticate-aws@main
      with:
          APP_NAME: ${{ inputs.APP_NAME }}
          USE_OIDC: ${{ inputs.USE_OIDC }}
          ENVIRONMENT: ${{ inputs.ENVIRONMENT }}
          AWS_REGION: ${{ inputs.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_GITHUBRUNNER_USER_ACCESS_KEY: ${{ secrets.AWS_GITHUBRUNNER_USER_ACCESS_KEY }}
          AWS_GITHUBRUNNER_USER_SECRET_ID: ${{ secrets.AWS_GITHUBRUNNER_USER_SECRET_ID }}

    - name: Checkout i-dot-ai-core-terraform repo
      uses: actions/checkout@v4
      with:
        repository: i-dot-ai/i-ai-core-infrastructure
        ref: refs/heads/main
        token: ${{ secrets.AWS_GITHUBRUNNER_PAT }}
        path: i-dot-ai-core-terraform
        aws-region: ${{ inputs.AWS_REGION }}
        mask-aws-account-id: 'yes'

    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: main

    # - name: Login to Amazon ECR
    #   run: |
    #     aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ input.AWS_REGION }}.amazonaws.com
    #   shell: bash

     
    - name: Login to Amazon ECR (Private)
      if: ${{ inputs.PUBLIC_ECR == false}}
      run: |
        aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ inputs.AWS_REGION }}.amazonaws.com
      shell: bash
  
    # Public ECR login step – runs if PUBLIC_ECR is 'true'
    - name: Login to Amazon ECR (Public)
      if: ${{ inputs.PUBLIC_ECR == true }}
      run: |
        aws ecr-public get-login-password --region ${{ inputs.AWS_REGION }} | docker login --username AWS --password-stdin public.ecr.aws/y9b8l3q4
      shell: bash
      
      
    - name: Create Docker cache container
      env:
        INSTANCE_NAME: ${{ inputs.DOCKER_BUILD_INSTANCE }}
      run: |
        if docker buildx ls --format "{{.Name}}" | grep -w "${INSTANCE_NAME}"; then
          echo "Instance ${INSTANCE_NAME} found."
        else
          echo "Instance ${INSTANCE_NAME} not found."
          docker buildx create --name "${INSTANCE_NAME}" --driver docker-container
          echo "Instance ${INSTANCE_NAME} is created."
        fi

    - name: Checkout
      uses: actions/checkout@v4
      with:
        repository: i-dot-ai/i-dot-ai-core-github-actions

    # - name: Export EFS_MOUNT_PATH
    #   uses: i-dot-ai/i-dot-ai-core-github-actions/.github/actions/export-parameter@main
    #   with:
    #       PARAMETER_STORE_VAR_NAME: /github-runner-${{ inputs.ENVIRONMENT }}/efs-mount-path
    #       ENVIRONMENT_VAR_NAME: EFS_MOUNT_PATH

    - name: Checkout
      uses: actions/checkout@v4
      with:
          path: main

    # - name: Docker build
    #   env:
    #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
    #     APP_NAME: ${{ inputs.APP_NAME }}
    #     SERVICE: ${{ inputs.SERVICE }}
    #     CACHE: "/mnt/efs"
    #   run: |
    #     cd main
    #     make docker_build service=$SERVICE cache=$CACHE

    
    - name: Docker build (Private)
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        APP_NAME: ${{ inputs.APP_NAME }}
        SERVICE: ${{ inputs.SERVICE }}
        CACHE: "/mnt/efs"
      run: |
        cd main
        make docker_build_public_image service=$SERVICE cache=$CACHE

    - name: Docker build (Public)
      env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          APP_NAME: ${{ inputs.APP_NAME }}
          SERVICE: ${{ inputs.SERVICE }}
          CACHE: "/mnt/efs"
      run: |
        cd main
        make docker_build service=$SERVICE cache=$CACHE
    
    - name: Docker Push (Private)
      if: ${{ inputs.PUBLIC_ECR == false}}
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        APP_NAME: ${{ inputs.APP_NAME }}
        SERVICE: ${{ inputs.SERVICE }}
      run: |
        cd main
        make docker_push service=$SERVICE
        IMAGE=$(eval $(make docker_echo value=IMAGE service=$SERVICE) | awk '{print $1;}')

    - name: Docker Push (Public)
      if: ${{ inputs.PUBLIC_ECR == true}}
      env:
        AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        APP_NAME: ${{ inputs.APP_NAME }}
        SERVICE: ${{ inputs.SERVICE }}
        VERSION: ${{ inputs.VERSION }}
      run: |
        cd main
        make docker_push_public_ecr service=$SERVICE version=$VERSION
        IMAGE=$(eval $(make docker_echo value=IMAGE service=$SERVICE) | awk '{print $1;}')

    - name: Export ecr image attributes
      id: export-ecr
      env:
        APP_NAME: ${{ inputs.APP_NAME }}
        SERVICE: ${{ inputs.SERVICE }}
      run: |
        cd main
        export REPO=$(eval $(make docker_echo value=ECR_REPO_NAME service=$SERVICE) | awk '{print $1;}')
        echo "repo=$REPO" >> $GITHUB_OUTPUT
        export TAG=$(eval $(make docker_echo value=IMAGE_TAG service=$SERVICE)| awk '{print $1;}')
        echo "tag=$TAG" >> $GITHUB_OUTPUT

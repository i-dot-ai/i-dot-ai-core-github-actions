name: Build dash

on:
  workflow_call:
    inputs:
      APP_NAME:
        required: true
        type: string
      RUNNER_LABEL:
        required: true
        type: string
      INFRASTRUCTURE_FOLDER:
        required: true
        type: string
      DOCKER_BUILD_INSTANCE_NAME:
        required: false
        default: container
        type: string
    secrets:
      AWS_GITHUBRUNNER_PAT:
        required: true
      AWS_GITHUBRUNNER_PAT_USER:
        required: true
      AWS_REGION:
        required: true
      AWS_ACCOUNT_ID:
        required: true

jobs:
  build-and-push-to-ecr:
    name: Build and push to ECR
    runs-on: ${{ inputs.RUNNER_LABEL }}
    

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        path: main
        fetch-depth: 0

    - name: Dump inputs context
      env:
        INPUTS: ${{ toJSON(inputs) }}
      run: echo "$INPUTS"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v3-node20
      id: aws-credentials
      with:
          aws-region: ${{ secrets.AWS_REGION }}
          mask-aws-account-id: 'yes'
  
    - name: Checkout i-dot-ai-core-terraform repo
      uses: actions/checkout@v4
      with:
        repository: i-dot-ai/i-ai-core-infrastructure
        ref: refs/heads/main
        token: ${{ secrets.AWS_GITHUBRUNNER_PAT }}
        path: i-dot-ai-core-terraform

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
      shell: bash

    - name: Create Docker cache container
      env:
        AWS_ACCOUNT_ID: ${{ steps.aws-credentials.outputs.aws-account-id }}
        APP_NAME: ${{ inputs.APP_NAME }}
        
      run: |
        INSTANCE_NAME=${{inputs.DOCKER_BUILD_INSTANCE_NAME}}
        # Check if the instance already exists
        EXISTING_INSTANCE=$(docker buildx ls --format "{{.Name}}" | grep -w "$INSTANCE_NAME")
        
        if [ -z "$EXISTING_INSTANCE" ]; then
            # Create the instance only if it does not exist
            docker buildx create --name "$INSTANCE_NAME" --driver docker-container
            echo "Buildx instance '$INSTANCE_NAME' created successfully."
        else
            echo "Buildx instance '$INSTANCE_NAME' already exists."
        fi

    - name: Docker build
      env:
        AWS_ACCOUNT_ID: ${{ steps.aws-credentials.outputs.aws-account-id }}
        APP_NAME: ${{ inputs.APP_NAME }}
        
      run: |
        cd main
        make docker_build

    - name: Docker Push
      env:
        AWS_ACCOUNT_ID: ${{ steps.aws-credentials.outputs.aws-account-id }}
        APP_NAME: ${{ inputs.APP_NAME }}
      run: |
        cd main
        make docker_push
        IMAGE=$(eval $(make docker_echo value=IMAGE) | awk '{print $1;}')
      
    - name: Export ecr image attributes
      id: export-ecr
      env:
        APP_NAME: ${{ inputs.APP_NAME }}
      run: |
        cd main
        export REPO=$(eval $(make docker_echo value=ECR_REPO_NAME) | awk '{print $1;}')
        echo "repo=$REPO" >> $GITHUB_OUTPUT
        export TAG=$(eval $(make docker_echo value=IMAGE_TAG)| awk '{print $1;}')
        echo "tag=$TAG" >> $GITHUB_OUTPUT
    - name: Clean Docker context
      run: docker system prune --all -f --filter "until=12h"
